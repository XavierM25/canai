<main class="min-h-screen justify-center items-center gap-64 flex max-w-screen mx-auto ">
    <aside class="space-y-10">
        <div id="image-container" class="w-[448px] h-[568px] bg-[#D9D9D9] justify-center items-center flex rounded-xl">
            <img src="/icons/image.svg" class="h-auto w-18" alt="">
        </div>
        <!-- Solo botón de descarga JSON -->
        <div class="flex justify-center">
            <button id="download-json" class="bg-[#0073F6] text-white px-4 py-2 rounded-lg flex items-center gap-2">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
                Descargar JSON
            </button>
        </div>
    </aside>
    <article class="space-y-16 max-w-xl text-[#454545]">
        <img src="/iconCanAI.svg" class="w-auto h-18 mx-auto" alt="">
        <h1 id="result-title" class="font-semibold text-3xl mb-2 text-center">Resultados del análisis</h1>
        <div id="result-container">
            <div id="error-message" class="hidden">
                <h1 class="font-semibold text-2xl mb-4 text-center text-red-500"></h1>
            </div>

            <div id="results-table" class="hidden border rounded-2xl">
                <!-- La tabla se generará dinámicamente con JavaScript -->
            </div>
        </div>
    </article>
</main>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Recuperar los resultados del análisis desde sessionStorage
        const analysisResultString = sessionStorage.getItem('analysisResult');
        if (!analysisResultString) {
            console.log("No hay resultados en sessionStorage");
            window.location.href = '/'; // Redirigir a la página principal si no hay resultados
            return;
        }

        const analysisResult = JSON.parse(analysisResultString);
        const errorMessageElement = document.getElementById('error-message');
        const tableElement = document.getElementById('results-table');
        const imageContainer = document.getElementById('image-container');

        console.log('Datos recibidos en ResultsCana:', analysisResult);

        // Comprobar si hay un error
        if (analysisResult.error) {
            console.log("Se detectó un error:", analysisResult.error);
            errorMessageElement.classList.remove('hidden');
            
            // Mostrar el mensaje de error
            const errorTitle = errorMessageElement.querySelector('h1');
            if (errorTitle) {
                errorTitle.textContent = analysisResult.error;
            } else {
                console.error("Elemento h1 para mostrar el error no encontrado");
                // Crear el elemento si no existe
                const newErrorTitle = document.createElement('h1');
                newErrorTitle.textContent = analysisResult.error;
                newErrorTitle.className = "font-semibold text-2xl mb-4 text-center text-red-500";
                errorMessageElement.appendChild(newErrorTitle);
            }
            
            tableElement.classList.add('hidden');
            
            // Ocultar botón de descarga en caso de error
            const downloadJsonBtn = document.getElementById('download-json');
            if (downloadJsonBtn) downloadJsonBtn.style.display = 'none';
            
            return;
        }

        // Si no hay error, generar la tabla dinámicamente
        console.log("Generando tabla dinámica de resultados");
        
        // Llamar a la función para crear la tabla dinámica
        createDynamicTable(tableElement, analysisResult);
        
        // Mostrar la imagen de debug si está disponible
        if (analysisResult.image_debug_url) {
            console.log("Mostrando imagen de debug:", analysisResult.image_debug_url);
            imageContainer.innerHTML = '';
            
            // Corregir la URL para que apunte al backend
            const imageUrl = analysisResult.image_debug_url.startsWith('http') 
                ? analysisResult.image_debug_url 
                : `http://127.0.0.1:8000${analysisResult.image_debug_url}`;
            
            console.log("URL corregida de la imagen:", imageUrl);
            
            const img = document.createElement('img');
            img.src = imageUrl;
            img.alt = 'Análisis de caña';
            img.classList.add('max-w-full', 'max-h-full', 'rounded-xl');
            imageContainer.appendChild(img);
        } else if (sessionStorage.getItem('selectedImageDataUrl')) {
            // Si no hay imagen de debug pero sí tenemos la imagen original seleccionada
            console.log("Mostrando imagen original seleccionada");
            imageContainer.innerHTML = '';
            
            const img = document.createElement('img');
            img.src = sessionStorage.getItem('selectedImageDataUrl');
            img.alt = 'Imagen seleccionada';
            img.classList.add('max-w-full', 'max-h-full', 'rounded-xl');
            imageContainer.appendChild(img);
        } else {
            console.log("No hay imagen disponible para mostrar");
        }
        
        // Configurar el botón de descarga JSON
        const downloadJsonBtn = document.getElementById('download-json');
        if (downloadJsonBtn) {
            downloadJsonBtn.addEventListener('click', () => {
                downloadJSON(analysisResult);
            });
        } else {
            console.error("Botón de descarga JSON no encontrado");
        }
    });
    
    // Función para crear la tabla dinámicamente basada en los resultados
    function createDynamicTable(container, data) {
        if (!container) return;
        
        // Limpiar el contenedor y mostrar
        container.innerHTML = '';
        container.classList.remove('hidden');
        
        // Grid principal
        const gridContainer = document.createElement('div');
        gridContainer.classList.add('grid', 'grid-cols-2', 'gap-0', 'border', 'rounded-2xl');
        
        // Altura de caña
        addRow(gridContainer, "Altura de caña:", 
               data.length_cm ? `${data.length_cm.toFixed(2)} cm` : 'N/A',
               true); // Primera fila con esquina superior redondeada
        
        // Cantidad de nudos
        addRow(gridContainer, "Cantidad de nudos:", 
               data.num_knots || 'N/A');
        
        // Filas dinámicas para las alturas de los nudos
        if (data.knot_thickness_cm && data.knot_thickness_cm.length > 0) {
            for (let i = 0; i < data.knot_thickness_cm.length; i++) {
                addRow(gridContainer, `Altura de nudo ${i + 1}:`, 
                       `${data.knot_thickness_cm[i].toFixed(2)} cm`);
            }
        }
        
        // Es una caña (última fila)
        addRow(gridContainer, "¿Es una caña?:", "Sí", false, true); // Última fila con esquina inferior redondeada
        
        // Añadir el grid al contenedor
        container.appendChild(gridContainer);
    }
    
    // Función auxiliar para añadir filas a la tabla
    function addRow(container, label, value, isFirstRow = false, isLastRow = false) {
        // Crear celdas
        const labelCell = document.createElement('div');
        const valueCell = document.createElement('div');
        
        // Agregar clases base
        labelCell.classList.add('border', 'p-2.5', 'text-center', 'font-bold');
        valueCell.classList.add('border', 'text-center', 'p-2.5');
        
        // Agregar clases de esquinas redondeadas si corresponde
        if (isFirstRow) {
            labelCell.classList.add('rounded-tl-2xl');
            valueCell.classList.add('rounded-tr-2xl');
        }
        
        if (isLastRow) {
            labelCell.classList.add('rounded-bl-2xl');
            valueCell.classList.add('rounded-br-2xl');
        }
        
        // Establecer contenido
        labelCell.textContent = label;
        valueCell.textContent = value;
        
        // Añadir celdas al contenedor
        container.appendChild(labelCell);
        container.appendChild(valueCell);
    }
    
    // Función para descargar los datos como archivo JSON
    function downloadJSON(data) {
        // Crear una copia de los datos para modificar la URL de la imagen si es necesario
        const jsonData = {...data};
        
        // Si hay una URL de imagen, asegurarse de que sea una URL completa
        if (jsonData.image_debug_url && !jsonData.image_debug_url.startsWith('http')) {
            jsonData.image_debug_url = `http://127.0.0.1:8000${jsonData.image_debug_url}`;
        }
        
        // Convertir los datos a una cadena JSON con formato legible
        const jsonString = JSON.stringify(jsonData, null, 2);
        
        // Crear un objeto Blob con los datos JSON
        const blob = new Blob([jsonString], { type: 'application/json' });
        
        // Crear una URL para el Blob
        const url = URL.createObjectURL(blob);
        
        // Crear un elemento <a> temporal para la descarga
        const a = document.createElement('a');
        a.href = url;
        a.download = `analisis_caña_${new Date().toISOString().slice(0, 10)}.json`;
        
        // Simular clic en el enlace para iniciar la descarga
        document.body.appendChild(a);
        a.click();
        
        // Limpiar
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        console.log("JSON descargado:", jsonData);
    }
</script>