<main class="min-h-screen justify-center items-center gap-64 flex max-w-screen mx-auto ">
    <aside class="space-y-10">
        <div id="image-container" class="w-[448px] h-[568px] bg-[#D9D9D9] justify-center items-center flex rounded-xl">
            <img src="/icons/image.svg" class="h-auto w-18" alt="">
        </div>
        <!-- Solo botón de descarga JSON -->
        <div class="flex justify-center">
            <button id="download-json" class="bg-[#0073F6] text-white px-4 py-2 rounded-lg flex items-center gap-2">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
                Descargar JSON
            </button>
        </div>
    </aside>
    <article class="space-y-16 max-w-xl text-[#454545]">
        <img src="/iconCanAI.svg" class="w-auto h-18 mx-auto" alt="">
        <h1 id="result-title" class="font-semibold text-3xl mb-2 text-center">Resultados del análisis</h1>
        <div id="result-container">
            <div id="error-message" class="hidden">
                <h1 class="font-semibold text-2xl mb-4 text-center text-red-500"></h1>
            </div>

            <div id="tabla" class="hidden grid grid-cols-2 grid-rows-8 gap-0 border rounded-2xl">
                <div class="border p-2.5 text-center font-bold rounded-tl-2xl">Altura de caña:</div>
                <div class="col-start-1 row-start-2 border p-2.5 text-center font-bold">Cantidad de nudos:</div>
                <div class="col-start-1 row-start-3 border p-2.5 text-center font-bold">Altura de nudo 1:</div>
                <div class="col-start-1 row-start-4 border p-2.5 text-center font-bold">Altura de nudo 2:</div>
                <div class="col-start-1 row-start-5 border p-2.5 text-center font-bold">Altura de nudo 3:</div>
                <div class="col-start-1 row-start-6 border p-2.5 text-center font-bold">Altura de nudo 4:</div>
                <div class="col-start-1 row-start-7 border p-2.5 text-center font-bold">Altura de nudo 5:</div>
                <div class="col-start-1 row-start-8 border p-2.5 text-center font-bold rounded-bl-2xl">¿Es una caña?:</div>
                <div id="cell-1" class="col-start-2 row-start-1 border text-center p-2.5 rounded-tr-2xl"></div>
                <div id="cell-2" class="col-start-2 row-start-2 border text-center p-2.5"></div>
                <div id="cell-3" class="col-start-2 row-start-3 border text-center p-2.5"></div>
                <div id="cell-4" class="col-start-2 row-start-4 border text-center p-2.5"></div>
                <div id="cell-5" class="col-start-2 row-start-5 border text-center p-2.5"></div>
                <div id="cell-6" class="col-start-2 row-start-6 border text-center p-2.5"></div>
                <div id="cell-7" class="col-start-2 row-start-7 border text-center p-2.5"></div>
                <div id="cell-8" class="col-start-2 row-start-8 border text-center p-2.5 rounded-br-2xl"></div>
            </div>
        </div>
    </article>
</main>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Recuperar los resultados del análisis desde sessionStorage
        const analysisResultString = sessionStorage.getItem('analysisResult');
        if (!analysisResultString) {
            console.log("No hay resultados en sessionStorage");
            window.location.href = '/'; // Redirigir a la página principal si no hay resultados
            return;
        }

        const analysisResult = JSON.parse(analysisResultString);
        const errorMessageElement = document.getElementById('error-message');
        const tableElement = document.getElementById('tabla');
        const imageContainer = document.getElementById('image-container');

        console.log('Datos recibidos en ResultsCana:', analysisResult);

        // Comprobar si hay un error
        if (analysisResult.error) {
            console.log("Se detectó un error:", analysisResult.error);
            errorMessageElement.classList.remove('hidden');
            
            // Mostrar el mensaje de error
            const errorTitle = errorMessageElement.querySelector('h1');
            if (errorTitle) {
                errorTitle.textContent = analysisResult.error;
            } else {
                console.error("Elemento h1 para mostrar el error no encontrado");
                // Crear el elemento si no existe
                const newErrorTitle = document.createElement('h1');
                newErrorTitle.textContent = analysisResult.error;
                newErrorTitle.className = "font-semibold text-2xl mb-4 text-center text-red-500";
                errorMessageElement.appendChild(newErrorTitle);
            }
            
            tableElement.classList.add('hidden');
            
            // Ocultar botón de descarga en caso de error
            const downloadJsonBtn = document.getElementById('download-json');
            if (downloadJsonBtn) downloadJsonBtn.style.display = 'none';
            
            return;
        }

        // Si no hay error, mostrar los resultados en la tabla
        console.log("Mostrando resultados en la tabla");
        tableElement.classList.remove('hidden');
        
        // Datos a mostrar en la tabla
        const resultData = {
            nudos: analysisResult.num_knots || 'N/A',
            entrenudos: (analysisResult.num_knots ? analysisResult.num_knots - 1 : 'N/A'),
            distancia_entre_nudos: 'Variable',
            largo_nudo: 'Variable',
            grosor_nudo: getAverageThickness(analysisResult.knot_thickness_cm) || 'N/A',
            altura_con_curvatura: analysisResult.length_cm ? `${analysisResult.length_cm.toFixed(2)} cm` : 'N/A',
            altura_sin_curvatura: analysisResult.length_cm ? `${(analysisResult.length_cm * 0.9).toFixed(2)} cm` : 'N/A', // Aproximación
            es_cana: 'Sí'
        };
        
        console.log("Datos para la tabla:", resultData);
        
        // Valores a colocar en la tabla
        const values = Object.values(resultData);
        
        // Obtener referencias a las celdas
        const cells = [];
        for (let i = 1; i <= 8; i++) {
            const cell = document.getElementById(`cell-${i}`);
            if (cell) {
                cells.push(cell);
            } else {
                console.error(`Celda cell-${i} no encontrada`);
            }
        }
        
        // Verificar si tenemos todas las celdas
        if (cells.length === 8) {
            // Asignar valores a celdas
            for (let i = 0; i < cells.length; i++) {
                cells[i].textContent = values[i];
            }
        } else {
            console.error("No se encontraron todas las celdas necesarias");
            // Opción alternativa: crear la tabla dinámicamente
            createDynamicTable(tableElement, resultData);
        }
        
        // Mostrar la imagen de debug si está disponible
        if (analysisResult.image_debug_url) {
            console.log("Mostrando imagen de debug:", analysisResult.image_debug_url);
            imageContainer.innerHTML = '';
            
            // Corregir la URL para que apunte al backend
            const imageUrl = analysisResult.image_debug_url.startsWith('http') 
                ? analysisResult.image_debug_url 
                : `http://127.0.0.1:8000${analysisResult.image_debug_url}`;
            
            console.log("URL corregida de la imagen:", imageUrl);
            
            const img = document.createElement('img');
            img.src = imageUrl;
            img.alt = 'Análisis de caña';
            img.classList.add('max-w-full', 'max-h-full', 'rounded-xl');
            imageContainer.appendChild(img);
        } else if (sessionStorage.getItem('selectedImageDataUrl')) {
            // Si no hay imagen de debug pero sí tenemos la imagen original seleccionada
            console.log("Mostrando imagen original seleccionada");
            imageContainer.innerHTML = '';
            
            const img = document.createElement('img');
            img.src = sessionStorage.getItem('selectedImageDataUrl');
            img.alt = 'Imagen seleccionada';
            img.classList.add('max-w-full', 'max-h-full', 'rounded-xl');
            imageContainer.appendChild(img);
        } else {
            console.log("No hay imagen disponible para mostrar");
        }
        
        // Configurar el botón de descarga JSON
        const downloadJsonBtn = document.getElementById('download-json');
        if (downloadJsonBtn) {
            downloadJsonBtn.addEventListener('click', () => {
                downloadJSON(analysisResult);
            });
        } else {
            console.error("Botón de descarga JSON no encontrado");
        }
    });
    
    // Función para descargar los datos como archivo JSON
    function downloadJSON(data) {
        // Crear una copia de los datos para modificar la URL de la imagen si es necesario
        const jsonData = {...data};
        
        // Si hay una URL de imagen, asegurarse de que sea una URL completa
        if (jsonData.image_debug_url && !jsonData.image_debug_url.startsWith('http')) {
            jsonData.image_debug_url = `http://127.0.0.1:8000${jsonData.image_debug_url}`;
        }
        
        // Convertir los datos a una cadena JSON con formato legible
        const jsonString = JSON.stringify(jsonData, null, 2);
        
        // Crear un objeto Blob con los datos JSON
        const blob = new Blob([jsonString], { type: 'application/json' });
        
        // Crear una URL para el Blob
        const url = URL.createObjectURL(blob);
        
        // Crear un elemento <a> temporal para la descarga
        const a = document.createElement('a');
        a.href = url;
        a.download = `analisis_caña_${new Date().toISOString().slice(0, 10)}.json`;
        
        // Simular clic en el enlace para iniciar la descarga
        document.body.appendChild(a);
        a.click();
        
        // Limpiar
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        console.log("JSON descargado:", jsonData);
    }
    
    // Función para crear la tabla dinámicamente por si hay problemas con las celdas
    function createDynamicTable(container, data) {
        if (!container) return;
        
        // Limpiar el contenedor
        container.innerHTML = '';
        container.classList.remove('hidden');
        container.classList.add('border', 'rounded-2xl');
        
        const labels = [
            "Nudos:", "Entrenudos:", "Distancia entre nudos:", 
            "Largo de nudo:", "Grosor de nudo:", 
            "Altura de caña (con corvatura):", "Altura de caña (sin corvatura):",
            "¿Es una caña?:"
        ];
        
        const values = Object.values(data);
        
        for (let i = 0; i < labels.length; i++) {
            const row = document.createElement('div');
            row.classList.add('grid', 'grid-cols-2', 'border-b');
            
            const labelCell = document.createElement('div');
            labelCell.classList.add('border-r', 'p-2.5', 'text-center', 'font-bold');
            labelCell.textContent = labels[i];
            
            const valueCell = document.createElement('div');
            valueCell.classList.add('p-2.5', 'text-center');
            valueCell.textContent = values[i];
            
            row.appendChild(labelCell);
            row.appendChild(valueCell);
            container.appendChild(row);
        }
    }
    
    // Función para calcular el grosor promedio de los nudos
    function getAverageThickness(thicknessArray) {
        if (!thicknessArray || thicknessArray.length === 0) return 'N/A';
        
        const sum = thicknessArray.reduce((acc, val) => acc + val, 0);
        return `${(sum / thicknessArray.length).toFixed(2)} cm`;
    }

    
</script>